[{"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/index.tsx":"1","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/App.tsx":"2","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/pages/MainPage/MainPage.tsx":"3","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/Panel.tsx":"4","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/Calendar.tsx":"5","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/Appointment.tsx":"6","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/TimeButton.tsx":"7","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Main/Project.tsx":"8","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Main/Footer.tsx":"9","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/pages/MainPage/ProjectData.js":"10"},{"size":272,"mtime":1666470426404,"results":"11","hashOfConfig":"12"},{"size":349,"mtime":1666471050376,"results":"13","hashOfConfig":"12"},{"size":1640,"mtime":1668021489952,"results":"14","hashOfConfig":"12"},{"size":1175,"mtime":1667713621658,"results":"15","hashOfConfig":"12"},{"size":4069,"mtime":1667669656028,"results":"16","hashOfConfig":"12"},{"size":1526,"mtime":1667669691525,"results":"17","hashOfConfig":"12"},{"size":740,"mtime":1667668206668,"results":"18","hashOfConfig":"12"},{"size":683,"mtime":1668020363866,"results":"19","hashOfConfig":"12"},{"size":508,"mtime":1668022769529,"results":"20","hashOfConfig":"12"},{"size":524,"mtime":1667966142924,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1hj5fpn",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/index.tsx",[],[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/App.tsx",[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/pages/MainPage/MainPage.tsx",["54","55"],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/Panel.tsx",[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/Calendar.tsx",["56"],[],"import { useState, useEffect } from 'react'\nimport './Calendar.css'\n\ninterface Props {\n    setSelectedDate: Function\n}\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n/* Returns an w x 7 array of dates (w = # of weeks in month) */\nconst getWeeks = (year: number, month: number): Date[][] => {\n    const result = [];\n  \n    const firstDay = new Date(year, month-1, 1);\n    const lastDay = new Date(year, month, 0);\n  \n    let tracker = firstDay;\n    \n    while (tracker.getDay() > 0)\n      tracker.setDate(tracker.getDate() - 1);\n  \n    let week = [];\n    while (tracker <= lastDay) {\n      week.push(new Date(tracker));\n      \n      tracker.setDate(tracker.getDate() + 1)\n  \n      if (week.length === 7) {\n        result.push(week);\n        week = [];\n      }\n    }\n  \n    if (lastDay.getDay() < 6) {\n      for (let i = tracker.getDay(); i < 7; i++) {\n        week.push(new Date(tracker));\n        tracker.setDate(tracker.getDate() + 1);\n      }\n      result.push(week);\n    }\n    \n    return result;\n}\n\nexport default function Calendar(props: Props) {\n    const defaultDate = new Date();\n\n    const [daySelected, setDaySelected] = useState(defaultDate.getDate());\n    const [monthSelected, setMonthSelected] = useState(defaultDate.getMonth());\n    const [yearSelected, setYearSelected] = useState(defaultDate.getFullYear());\n\n    useEffect(() => {\n      props.setSelectedDate(new Date(yearSelected, monthSelected, daySelected));\n    }, [daySelected, monthSelected])\n\n    /* Updates date info any time calendar buttons are clicked */\n    const handleInput = (month: number, day: number = 1, year: number = yearSelected): void => {\n        if (month < 0) {\n          month = 11;\n          year -= 1\n        }\n        else if (month > 11) {\n          month = 0;\n          day = (new Date(yearSelected, monthSelected, 0)).getDate()\n          year += 1\n        }\n        setMonthSelected(month);\n        setYearSelected(year);\n        setDaySelected(day);\n    }\n\n    return (\n    <>\n        <table className='calendarTable'>\n            <thead>\n            <tr style={{lineHeight: \"3rem\"}}>\n                <th colSpan={5}>\n                {months[monthSelected]} {yearSelected}\n                </th>\n                <th colSpan={1}>\n                <button className='changeMonthButton' onClick={() => handleInput(monthSelected-1)}>\n                    &lt;\n                </button>\n                </th>\n                <th colSpan={1}>\n                <button className='changeMonthButton' onClick={() => handleInput(monthSelected+1)}>\n                    &gt;\n                </button>\n                </th>\n            </tr>\n            <tr>\n                <th>S</th>\n                <th>M</th>\n                <th>T</th>\n                <th>W</th>\n                <th>T</th>\n                <th>F</th>\n                <th>S</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                getWeeks(yearSelected, monthSelected+1)\n                .map((dateRow: Date[], i: number): any => (\n                <tr key={i}>\n                    {dateRow.map((day: Date): any => {\n                    return <td key={day.getDate()}>\n                        <button \n                        className={\n                        `dateButton ${day.getMonth() !== monthSelected  ? 'dateButtonNotMonth' : ''} \n                        ${day.toDateString() === (new Date()).toDateString() ? 'dateButtonToday': ''} \n                        ${(day.getDate() === daySelected && day.getMonth() === monthSelected) ? 'dateButtonSelected': ''}\n                        `\n                        }\n                        disabled={day < new Date()}\n                        onClick={() => handleInput(day.getMonth(), day.getDate())}>\n                        { day.getDate() }\n                        </button>\n                    </td>\n                    })}\n                </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    </>\n    )\n}\n","/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/Appointment.tsx",[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Panel/TimeButton.tsx",[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Main/Project.tsx",[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/components/Main/Footer.tsx",[],[],"/Users/plezo/Documents/TypeScriptWebsite/typescript-website/src/pages/MainPage/ProjectData.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":14,"column":10,"nodeType":"59","messageId":"60","endLine":14,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":14,"column":20,"nodeType":"59","messageId":"60","endLine":14,"endColumn":31},{"ruleId":"62","severity":1,"message":"63","line":54,"column":8,"nodeType":"64","endLine":54,"endColumn":36,"suggestions":"65"},"@typescript-eslint/no-unused-vars","'darkMode' is assigned a value but never used.","Identifier","unusedVar","'setDarkMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'yearSelected'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["66"],{"desc":"67","fix":"68"},"Update the dependencies array to be: [daySelected, monthSelected, props, yearSelected]",{"range":"69","text":"70"},[1529,1557],"[daySelected, monthSelected, props, yearSelected]"]